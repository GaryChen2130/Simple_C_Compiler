/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#define BUF_SIZE 256

extern int error_num;
extern YYSTYPE yylval; //YYSTYPE
extern yylineno;
char buf[BUF_SIZE];

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT; return ADD; }
"-" 	{ CONCAT; return SUB; }
"*" 	{ CONCAT; return MUL; }
"/" 	{ CONCAT; return DIV; }
"%"     { CONCAT; return MOD; }
"++"    { CONCAT; return INC; }
"--"    { CONCAT; return DEC; }

 /* Relational */
">"		{ CONCAT; return MT; }
"<"		{ CONCAT; return LT; }
">="	{ CONCAT; return MTE; }
"<="	{ CONCAT; return LTE; }
"=="	{ CONCAT; return EQ; }
"!="	{ CONCAT; return NE; }

 /* Assignment */
"="		{ CONCAT; return ASGN; }
"+="	{ CONCAT; return ADDASGN; }
"-="	{ CONCAT; return SUBASGN; }
"*="	{ CONCAT; return MULASGN; }
"/="	{ CONCAT; return DIVASGN; }
"%="	{ CONCAT; return MODASGN; }

 /* Logical */
"&&"	{ CONCAT; return AND; }
"||"	{ CONCAT; return OR; }
"!"		{ CONCAT; return NOT; }

 /* Delimiters */
"("		{ CONCAT; return LB; }
")"		{ CONCAT; return RB; }
"{"		{ CONCAT; return LCB; }
"}"		{ CONCAT; return RCB; }
"["		{ CONCAT; return LSB; }
"]"		{ CONCAT; return RSB; }
","		{ CONCAT; return COMMA; }

 /* Print Keywords */	
"print"		{ CONCAT; return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT; return IF; }
"else"		{ CONCAT; return ELSE; }
"for"		{ CONCAT; return FOR; }
"while"		{ CONCAT; return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT; return VOID;}
"int"		{ CONCAT; return INT; }
"float"  	{ CONCAT; return FLOAT; }
"string"  	{ CONCAT; return STRING; }
"bool"  	{ CONCAT; return BOOL; }

 /* boolean Keywords */
"true"      { CONCAT; return TRUE; }
"false"     { CONCAT; return FALSE; }

"return"    { CONCAT; return RET; }
"continue"  { CONCAT; return CONT; }
"break"	    { CONCAT; return BREAK; }

 /* String Constant */
\"				        { BEGIN STRING_STATE; CONCAT; return QUATA;}
<STRING_STATE>\"		{ BEGIN INITIAL; CONCAT; return QUATA;}
<STRING_STATE>[^"]*		{ yylval.string = strdup(yytext); CONCAT; return STR_CONST; }

 /* Number Constant */
{integer}	{ yylval.i_val = atoi(yytext); CONCAT; return I_CONST; }
{float}	    { yylval.f_val = atof(yytext); CONCAT; return F_CONST; }

 /* C type Comment */
"/*"				{ CONCAT; BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ CONCAT; }
<COMMENT>\n			{ printf("%d: %s\n", yylineno, buf); memset(buf,'\0',sizeof(buf));}
<COMMENT>"*"		{ CONCAT; }
<COMMENT>"*/"		{  CONCAT; BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ CONCAT; }

 /* Variable ID */
 {id}       { CONCAT; return ID; }

 /* others */

"\""	    { CONCAT; return QUATA; }
[;]         { CONCAT; return SEMICOLON; }
[\n]        { if(error_num == 0){
	      	printf("%d:",yylineno);
	      	if(strlen(buf) != 0){
			printf(" ");
	        }
	      	printf("%s\n",buf);
	      }
	      else
		yysemantic(0);
	      if(buf[strlen(buf) - 1] == '}')
		Print_Table(1);
	      memset(buf,'\0',sizeof(buf));
            }
[ \t]		{ CONCAT;} /* Ignore */
[^ \t\n] 	{;} /* Ignore other charactor sets */
<<EOF>>     { yyterminate(); }

%%

int yywrap()
{
    return 1;
}
